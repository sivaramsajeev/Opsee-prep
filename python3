A future statement is a directive to the compiler that a particular module should be compiled using syntax or semantics that will be available in a specified future release of Python. The future statement is intended to ease migration to future versions of Python that introduce incompatible changes to the language. It allows use of the new features on a per-module basis before the release in which the feature becomes standard.

If you actually want to import the __future__ module, just do

import __future__


__future__ is a pseudo-module which programmers can use to enable new language features which are not compatible with the current interpreter. For example, the expression 11/4 currently evaluates to 2. If the module in which it is executed had enabled true division by executing:

from __future__ import division

the expression 11/4 would evaluate to 2.75. 




hostname = '192.168.3.4'    
port = 22
username = 'username'
password = 'mypassword'
y = "2012"
m = "02"
d = "27"

def do_it():
    s = paramiko.SSHClient()
    s.load_system_host_keys()
    s.connect(hostname, port, username, password)
    command = 'ls /home/user/images/cappi/03000/' + y + '/' + m + '/' + d
    (stdin, stdout, stderr) = s.exec_command(command)
    for line in stdout.readlines():
        print line
    s.close()

if __name__ == "main":
    do_it()

##############################################################################################################

@app.route("/")
def index():
    """Present some documentation"""

    # Open the README file
    with open(os.path.dirname(app.root_path) + '/README.md', 'r') as markdown_file:

        # Read the content of the file
        content = markdown_file.read()

        # Convert to HTML
        return markdown.markdown(content)
	
	
	
	
	
	@app.route('/json_api')
def json_api():
        return jsonify({'about':'working with REST APIs'})



@app.route('/multiply/<int:number>',methods=['GET'])
def multiply_num(number):
        return jsonify({'product':number*10})


@app.route('/send_ur_data',methods=['GET','POST'])
def send_ur_data():
	if request.method == 'POST':
		return jsonify({'you sent' : request.get_json()}),201
	else:
		return jsonify({'you sent' : 'no data'})        



################################################################################################################
import webbrowser, sys, pyperclip
if len(sys.argv) > 1:
    # Get address from command line.
    address = ' '.join(sys.argv[1:])
else:
    # Get address from clipboard.
    address = pyperclip.paste()

webbrowser.open('https://www.google.com/maps/place/' + address)


>>> strng='hello world to pythonians'
>>> re.sub('hello','hi',strng)
'hi world to pythonians'



res = requests.get('http://inventwithpython.com/page_that_does_not_exist')
try:
    res.raise_for_status()
except Exception as exc:
    print('There was a problem: %s' % (exc))
    
    
    
>>> res.raise_for_status()
>>> playFile = open('RomeoAndJuliet.txt', 'wb')
>>> for chunk in res.iter_content(100000):
        playFile.write(chunk)

100000
78981
>>> playFile.close()


ctrl+u   to view source  but better to select the specific area and inspect element to 'select' using bs4

req to download & bs4 to parse it  


right click on the element and copy css path 


>>> soup = bs4.BeautifulSoup(open('example.html'))
>>> spanElem = soup.select('span')[0]
>>> str(spanElem)
'<span id="author">Al Sweigart</span>'
>>> spanElem.get('id')
'author'
>>> spanElem.get('some_nonexistent_addr') == None
True
>>> spanElem.attrs
{'id': 'author'}



The select() method will return a list of Tag objects, which is how Beautiful Soup represents an HTML element. The list will contain one Tag object for every match in the BeautifulSoup object’s HTML. Tag values can be passed to the str() function to show the HTML tags they represent. Tag values also have an attrs attribute that shows all the HTML attributes of the tag as a dictionary. Using the example.html file from earlier, enter the following into the interactive shell:


>>> import bs4
>>> exampleFile = open('example.html')
>>> exampleSoup = bs4.BeautifulSoup(exampleFile.read())
>>> elems = exampleSoup.select('#author')
>>> type(elems)
<class 'list'>
>>> len(elems)
1



Selector passed to the select() method

Will match...

soup.select('div')

All elements named <div>

soup.select('#author')

The element with an id attribute of author

soup.select('.notice')

All elements that use a CSS class attribute named notice

soup.select('div span')

All elements named <span> that are within an element named <div>

soup.select('div > span')

All elements named <span> that are directly within an element named <div>, with no other element in between

soup.select('input[name]')

All elements named <input> that have a name attribute with any value

soup.select('input[type="button"]')

All elements named <input> that have an attribute named type with value button







import requests

url = 'https://www.python.org/static/img/python-logo.png'
fileName = 'D:\Python\dwnldPythonLogo.png'
req = requests.get(url)
file = open(fileName, 'wb')
for chunk in req.iter_content(100000):
    file.write(chunk)
file.close()

OR

import urllib.request
...
url = 'http://example.com/'
response = urllib.request.urlopen(url)
data = response.read()      # a `bytes` object
text = data.decode('utf-8') # a `str`; this step can't be used if data is binary
The easiest way to download and save a file is to use the urllib.request.urlretrieve function:

import urllib.request
...
# Download the file from `url` and save it locally under `file_name`:
urllib.request.urlretrieve(url, file_name)



URL = "https://www.amazon.de/Bloodborne-Game-Year-PlayStation-4/dp/B016ZU4FIQ/ref=sr_1_3?ie=UTF8&qid=1519566642&sr=8-3&keywords=bloodborne+ps4"
page = requests.get(URL,headers={"User-Agent":"Defined"})
soup = BeautifulSoup(page.content, "html.parser")
price = soup.find(id="priceblock_ourprice").get_text()
print(price)


but sometimes webpage might require login stuff or fill out fields  selenium for the rescue


>>> from selenium import webdriver
>>> browser = webdriver.Firefox()
>>> type(browser)
<class 'selenium.webdriver.firefox.webdriver.WebDriver'>
>>> browser.get('http://inventwithpython.com')


Table 11-3. Selenium’s WebDriver Methods for Finding Elements

Method name

WebElement object/list returned

browser.find_element_by_class_name(name)
browser.find_elements_by_class_name(name)
Elements that use the CSS class name

browser.find_element_by_css_selector(selector)
browser.find_elements_by_css_selector(selector)
Elements that match the CSS selector

browser.find_element_by_id(id)
browser.find_elements_by_id(id)
Elements with a matching id attribute value

browser.find_element_by_link_text(text)
browser.find_elements_by_link_text(text)
<a> elements that completely match the text provided

browser.find_element_by_partial_link_text(text)
browser.find_elements_by_partial_link_text(text)
<a> elements that contain the text provided

browser.find_element_by_name(name)
browser.find_elements_by_name(name)
Elements with a matching name attribute value

browser.find_element_by_tag_name(name)
browser.find_elements_by_tag_name(name)
Elements with a matching tag name (case insensitive; an <a> element is matched by 'a' and 'A')



For example, open a new file editor and enter the following program:


from selenium import webdriver
browser = webdriver.Firefox()
browser.get('http://inventwithpython.com')
try:
    elem = browser.find_element_by_class_name('bookcover')
    print('Found <%s> element with that class name!' % (elem.tag_name))
except:
    print('Was not able to find an element with that name.')
    
    
    
>>> from selenium import webdriver
>>> browser = webdriver.Firefox()
>>> browser.get('http://inventwithpython.com')
>>> linkElem = browser.find_element_by_link_text('Read It Online')
>>> type(linkElem)
<class 'selenium.webdriver.remote.webelement.WebElement'>
>>> linkElem.click() # follows the "Read It Online" link




Sending keystrokes to text fields on a web page is a matter of finding the <input> or <textarea> element for that text
field and then calling the send_keys() method. For example, enter the following into the interactive shell:

>>> browser = webdriver.Firefox()
>>> browser.get('https://mail.yahoo.com')
>>> emailElem = browser.find_element_by_id('login-username')
>>> emailElem.send_keys('not_my_real_email')
>>> passwordElem = browser.find_element_by_id('login-passwd')
>>> passwordElem.send_keys('12345')
>>> passwordElem.submit()
As long as Gmail hasn’t changed the id of the Username and Password text fields since this book was published, the 
previous code will fill in those text fields with the provided text. (You can always use the browser’s inspector to 
verify the id.) Calling the submit() method on any element will have the same result as clicking the Submit button for
the form that element is in. (You could have just as easily called emailElem.submit(), and the code would have done the 
same thing.)


Sending keystrokes to text fields on a web page is a matter of finding the <input> or <textarea> element for that text field and then calling the send_keys() method. For example, enter the following into the interactive shell:


Sending Special Keys
Selenium has a module for keyboard keys that are impossible to type into a string value, which function much like 
escape characters. These values are stored in attributes in the selenium.webdriver.common.keys module. Since that is
such a long module name, it’s much easier to run from selenium.webdriver.common.keys import Keys at the top of your
program; if you do, then you can simply write Keys anywhere you’d normally have to write selenium.webdriver.common.keys. 
Table 11-5 lists the commonly used Keys variables.

Table 11-5. Commonly Used Variables in the selenium.webdriver.common.keys Module

Attributes

Meanings

Keys.DOWN, Keys.UP, Keys.LEFT, Keys.RIGHT

The keyboard arrow keys

Keys.ENTER, Keys.RETURN


Clicking Browser Buttons
Selenium can simulate clicks on various browser buttons as well through the following methods:

browser.back(). Clicks the Back button.

browser.forward(). Clicks the Forward button.

browser.refresh(). Clicks the Refresh/Reload button.

browser.quit(). Clicks the Close Window button.

to fully automate any web-based tasks, you need direct control of your web browser through the selenium module. 
The selenium module will allow you to log in to websites and fill out forms automatically. Since a web browser is 
the most common way to send and receive information over the Internet, this is a great ability to have in your programmer 
toolkit.

#######################################################################################################################





The ENTER and RETURN keys

Keys.HOME, Keys.END, Keys.PAGE_DOWN, Keys.PAGE_UP

The home, end, pagedown, and pageup keys

Keys.ESCAPE, Keys.BACK_SPACE, Keys.DELETE

The ESC, BACKSPACE, and DELETE keys

Keys.F1, Keys.F2,..., Keys.F12

The F1 to F12 keys at the top of the keyboard

Keys.TAB

The TAB key

For example, if the cursor is not currently in a text field, pressing the HOME and END keys will scroll the browser 
to the top and bottom of the page, respectively. Enter the following into the interactive shell, and notice how the 
send_keys() calls scroll the page:


>>> from selenium import webdriver
>>> from selenium.webdriver.common.keys import Keys
>>> browser = webdriver.Firefox()
>>> browser.get('http://nostarch.com')
>>> htmlElem = browser.find_element_by_tag_name('html')
>>> htmlElem.send_keys(Keys.END)     # scrolls to bottom
>>> htmlElem.send_keys(Keys.HOME)    # scrolls to top


######################################################################################################

import time
import requests

def downspeed():
    url = "http://speedtest.ftp.otenet.gr/files/test100k.db"

    start = time.time()
    file = requests.get(url)
    end = time.time()

    time_difference = end - start
    file_size = int(file.headers['Content-Length'])/1000    
    return round(file_size / time_difference)


####################################################################################################


from PIL import Image

img = Image.open('/var/www/html/images/woman-wearing-red-bikini-1978611.jpg') 
new_width  = 1200
new_height = 2400
img = img.resize((new_width, new_height), Image.ANTIALIAS)
img.save('/var/www/html/images/woman_red_bikini.jpg') # format may what u want ,*.png,*jpg,*.gif


##################################################################################################

import socket


def client_program():
    host = socket.gethostname()  # as both code is running on same pc
    port = int(input('Enter the port'))  # socket server port number

    client_socket = socket.socket()  # instantiate
    client_socket.connect((host, port))  # connect to the server

    message = input(" -> ")  # take input

    while message.lower().strip() != 'bye':
        client_socket.send(message.encode())  # send message
        data = client_socket.recv(1024).decode()  # receive response

        print('Received from server: ' + data)  # show in terminal

        message = input(" -> ")  # again take input

    client_socket.close()  # close the connection


if __name__ == '__main__':
    client_program()




cat socket_server.py

import socket


def server_program():
    # get the hostname
    host = socket.gethostname()
    port = 5000  # initiate port no above 1024

    server_socket = socket.socket()  # get instance
    # look closely. The bind() function takes tuple as argument
    server_socket.bind((host, port))  # bind host address and port together

    # configure how many client the server can listen simultaneously
    server_socket.listen(2)
    conn, address = server_socket.accept()  # accept new connection
    print("Connection from: " + str(address))
    while True:
        # receive data stream. it won't accept data packet greater than 1024 bytes
        data = conn.recv(1024).decode()
        if not data:
            # if data is not received break
            break
        print("from connected user: " + str(data))
        data = input(' -> ')
        conn.send(data.encode())  # send data to the client

    conn.close()  # close the connection


if __name__ == '__main__':
    server_program()

##################################################################################################################


#!/usr/bin/env python
 
import sys
import os
import time
from datetime import datetime
 
now = time.time()
if len(sys.argv) < 2:
   print('Usage: {} FILENAME'.format(sys.argv[0]))
 
filename = sys.argv[1]
 
mtime = os.path.getmtime( filename)
print(mtime)
print(now - mtime)
 
 
stat = os.stat( filename)
print(stat.st_mtime)
date = datetime.fromtimestamp(stat.st_mtime)
print(date)


#############################################################################################################

import configparser
import requests
import sys
 
def get_api_key():
    config = configparser.ConfigParser()
    config.read('config.ini')
    return config['openweathermap']['api']
 
def get_weather(api_key, location):
    url = "https://api.openweathermap.org/data/2.5/weather?q={}&units=metric&appid={}".format(location, api_key)
    r = requests.get(url)
    return r.json()
 
def main():
    if len(sys.argv) != 2:
        exit("Usage: {} LOCATION".format(sys.argv[0]))
    location = sys.argv[1]
 
    api_key = get_api_key()
    weather = get_weather(api_key, location)
 
    print(weather['main']['temp'])
    print(weather)
 
 
if __name__ == '__main__':
    main()

############################################################################################################

>>> word = " hello "
>>> word.lstrip()
'hello '
>>> word.rstrip()
' hello'
>>> word.strip()
'hello'
 
# actual string is still unchanged
>>> word
' hello '
 
# to make these changes permanent
>>> newword = word.strip()
>>> newword
'hello'
You can remove other characters like

>>> newword.rstrip('o')
'hell'


These two are equivalent :

my_string.strip()
 
# is equivalent to this : although strip is likely to be faster
my_string.lstrip().rstrip()

########################################################################################################################################################################

A Python package is simply an organized collection of python modules. A python module is simply a single python file.

Creating a package with __init__.py is all about making it easier to develop larger Python projects.

It provides a mechanism for you to group separate python scripts into a single importable module.

So, without creating a package and using __init__.py, how do we use the functions in these files?

Well, we can only import these files if they are in the current directory that whatever script we are running is running from.

Well, we can use these files in a new Python script but with one key caveat:

The files must be in the same directory as the script we are trying to use them in.

# example3.py

import string_func

some_string = "Hello, Universe!"

print(string_func.stringLength(some_string))
print(string_func.stringToLower(some_string))
print(string_func.stringToUpper(some_string))
Now the syntax is a lot shorter and you can see that string_func is behaving like its own module.

So, that is basically what __init__.py does! It allows you to treat a directory as if it was a python module. Then you can further 
define imports inside your __init__.py file to make imports more succinct, or you can just leave the file blank


Files name __init__.py are used to mark directories on disk as Python package directories. If you have the files

mydir/spam/__init__.py
midir/spam/module.py
and mydir is on your path, you can import the code in module.py as

import spam.module
or

from spam import module
If you remove the __init__.py file, Python will no longer look for submodules inside that directory, so attempts to import the module 
will fail.

The __init__.py file is usually empty, but can be used to export selected portions of the package under more convenient name, hold 
convenience functions, etc. Given the example above, the contents of the init module can be accessed as

import spam


# __init__.py
from .foo import *
from .bar import *


# __init__.py
from .foo import foo_func
from .bar import bar_func

# __init__.py
import example_pkg.foo



##################################3333333333333333333333333333333333333333333333333#############################################################################################################################

Python within bash - sleep $(python -c "import random;print random.uniform(.01, .8)")

import requests
 
r = requests.get('http://httpbin.org/headers',
        headers = {
            'User-agent'  : 'Internet Explorer/2.0',
            'SOAPAction'  : 'http://www.corp.net/some/path/CustMsagDown.Check',
            'Content-type': 'text/xml'
        }
    )
print(r.text)


###########################################################################################################
# Python program to illustrate  
# *args with first extra argument 
def myFun(arg1, *argv): 
    print ("First argument :", arg1) 
    for arg in argv: 
        print("Next argument through *argv :", arg) 
  
myFun('Hello', 'Welcome', 'to', 'GeeksforGeeks')


**kwargs

The special syntax **kwargs in function definitions in python is used to pass a keyworded, variable-length argument list.
We use the name kwargs with the double star. The reason is because the double star allows us to pass through keyword arguments 
(and any number of them).

A keyword argument is where you provide a name to the variable as you pass it into the function.
One can think of the kwargs as being a dictionary that maps each keyword to the value that we pass alongside it. 
That is why when we iterate over the kwargs there doesn’t seem to be any order in which they were printed out.

def myFun(**kwargs):  
    for key, value in kwargs.items(): 
        print ("%s == %s" %(key, value)) 
  
# Driver code 
myFun(first ='Geeks', mid ='for', last='Geeks')



def myFun(arg1, arg2, arg3): 
    print("arg1:", arg1) 
    print("arg2:", arg2) 
    print("arg3:", arg3) 
      
# Now we can use *args or **kwargs to 
# pass arguments to this function :  
args = ("Geeks", "for", "Geeks") 
myFun(*args) 
  
kwargs = {"arg1" : "Geeks", "arg2" : "for", "arg3" : "Geeks"} 
myFun(**kwargs)



When programming, you may not be aware of all the possible use cases of your code, and may want to offer more options for 
future programmers working with the module, or for users interacting with the code. We can pass a variable number of 
arguments to a function by using *args and **kwargs in our code


In Python, the single-asterisk form of *args can be used as a parameter to send a non-keyworded variable-length argument
list to functions. It is worth noting that the asterisk (*) is the important element here, as the word args is the established 
conventional idiom, though it is not enforced by the language.

def multiply(*args):
    z = 1
    for num in args:
        z *= num
    print(z)

multiply(4, 5)
multiply(10, 9)
multiply(2, 3, 4)
multiply(3, 5, 10, 6)


What is important to note is that a dictionary called kwargs is created and we can work with it just like we can work with other 
dictionaries.

def print_values(**kwargs):
    for key, value in kwargs.items():
        print("The value of {} is {}".format(key, value))

print_values(my_name="Sammy", your_name="Casey")

def concatenate(**kwargs):
    result = ""
    # Iterating over the Python kwargs dictionary
    for arg in kwargs.values():
        result += arg
    return result

print(concatenate(a="Real", b="Python", c="Is", d="Great", e="!"))













##############################################################################################################################################################################################################################

cat get_useragent.py

import requests
 
r = requests.get('http://httpbin.org/user-agent')
print(r.headers['content-type'])
print(r.text)
data = r.json()
print(data)
print(data['user-agent'])


######################################################################################################


import requests
req = requests.post('https://en.wikipedia.org/w/index.php', data = {'search':'Nanotechnology'})
req.raise_for_status()
with open('Nanotechnology.html', 'wb') as fd:
	for chunk in req.iter_content(chunk_size=50000):
		fd.write(chunk)

######################################################################################################


import time
while True:
  localtime = time.localtime()
  result = time.strftime("%I:%M:%S %p", localtime)
  print(result)
  time.sleep(1)

#####################################################################################################

cat elapsed_time.py
import time
import datetime
t1 = datetime.datetime.now()
time.sleep(120)
t2 = datetime.datetime.now()
elapsedTime = t2 - t1

print('time elapsed is {}'.format(divmod(elapsedTime.total_seconds(), 60)))

###################################################################################################

from datetime import date
from datetime import time
from datetime import datetime
def main():
    ##DATETIME OBJECTS
    #Get today's date from datetime class
    today=datetime.now()
    #print (today)
    # Get the current time
    #t = datetime.time(datetime.now())
    #print "The current time is", t
    #weekday returns 0 (monday) through 6 (sunday)
    wd=date.weekday(today)
    #Days start at 0 for monday
    days= ["monday","tuesday","wednesday","thursday","friday","saturday","sunday"]
    print("Today is day number %d" % wd)
    print("which is a " + days[wd])

if __name__== "__main__":
    main()

########################################################################################################

import time
import boto3
import paramiko


def lambda_handler(event, context):

    ec2 = boto3.resource('ec2', region_name='your-ec2-region-name')

    instance_id = 'your-ec2-instance-id'

    instance = ec2.Instance(instance_id)

    # Start the instance
    instance.start()

    # Giving some time to start the instance completely
    time.sleep(60)

    # Print few details of the instance
    print("Instance id - ", instance.id)
    print("Instance public IP - ", instance.public_ip_address)
    print("Instance private IP - ", instance.private_ip_address)
    print("Public dns name - ", instance.public_dns_name)
    print("----------------------------------------------------")

    # Connect to S3, we will use it get the pem key file of your ec2 instance
    s3_client = boto3.client('s3')

    # Download private key file from secure S3 bucket
    # and save it inside /tmp/ folder of lambda event
    s3_client.download_file('YourBucketName', 'YourPEMFileObject.pem',
                            '/tmp/keyname.pem')

    # Allowing few seconds for the download to complete
    time.sleep(20)

    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    privkey = paramiko.RSAKey.from_private_key_file('/tmp/keyname.pem')
    # username is most likely 'ec2-user' or 'root' or 'ubuntu'
    # depending upon yor ec2 AMI
    ssh.connect(
        instance.public_dns_name, username='Your-ec2-UserName', pkey=privkey
    )
    stdin, stdout, stderr = ssh.exec_command(
        'echo "ssh to ec2 instance successful"')
    stdin.flush()
    data = stdout.read().splitlines()
    for line in data:
        print(line)

    ssh.close()

    # Stop the instance
    instance.stop()

################################################################################################################################

import time
import boto3
import paramiko


def lambda_handler(event, context):

    ec2 = boto3.resource('ec2', region_name='your-ec2-region-name')

    instance_id = 'your-ec2-instance-id'

    instance = ec2.Instance(instance_id)

    # Start the instance
    instance.start()

    # Giving some time to start the instance completely
    time.sleep(60)

    # Print few details of the instance
    print("Instance id - ", instance.id)
    print("Instance public IP - ", instance.public_ip_address)
    print("Instance private IP - ", instance.private_ip_address)
    print("Public dns name - ", instance.public_dns_name)
    print("----------------------------------------------------")

    # Connect to S3, we will use it get the pem key file of your ec2 instance
    s3_client = boto3.client('s3')

    # Download private key file from secure S3 bucket
    # and save it inside /tmp/ folder of lambda event
    s3_client.download_file('YourBucketName', 'YourPEMFileObject.pem',
                            '/tmp/keyname.pem')

    # Allowing few seconds for the download to complete
    time.sleep(20)

    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    privkey = paramiko.RSAKey.from_private_key_file('/tmp/keyname.pem')
    # username is most likely 'ec2-user' or 'root' or 'ubuntu'
    # depending upon yor ec2 AMI
    ssh.connect(
        instance.public_dns_name, username='Your-ec2-UserName', pkey=privkey
    )
    stdin, stdout, stderr = ssh.exec_command(
        'echo "ssh to ec2 instance successful"')
    stdin.flush()
    data = stdout.read().splitlines()
    for line in data:
        print(line)

    ssh.close()

    # Stop the instance
    instance.stop()

###################################################################################################################

def mail_sender(recipient_address,message):
	s = smtplib.SMTP('smtp.gmail.com', 587) 
	s.starttls() 
	s.login(os.getenv('sender_email_id'), os.getenv('sender_email_id_password')) 
	s.sendmail(os.getenv('sender_email_id'), recipient_address, message) 
	s.quit() 


if __name__ == '__main__':
	recipient_address = sys.argv[1]
	message = sys.argv[2]
	print("Usage: python3 script <recipient-address> <message>")
	mail_sender(recipient_address, message)


###################################################################################################################

def main():
	print("Memory information: ")

	with open('/proc/meminfo') as f:
		info = f.readlines()

	#print([x for x in info if 'memtotal' in x.lower() ])
	array_to_search = ['memtotal','memfree','memavailable']
	meminfo = [x.upper() for x in info for arg in array_to_search if arg in x.lower() ]
	for i in meminfo:
		print('{}    {} kb'.format(*i.split()),end='\n')


################################################################################################################

with open('/proc/self/mounts') as f:
	info=f.readlines()

for i in info:
	if 'ext' in i:
		print('{0}      {1}     {2}\n'.format(*i.split()),end='')

################################################################################################################

with open("/proc/cpuinfo", "r")  as f:
    info = f.readlines()

cpuinfo = [x.strip().split(":")[1] for x in info if "model name"  in x]
for index, item in enumerate(cpuinfo):
    print("    " + str(index) + ": " + item)
##############################################################################################################

with Popen(["ifconfig"], stdout=PIPE) as proc:
    log.write(proc.stdout.read())
    

Replacing shell pipeline
output=$(dmesg | grep hda)
becomes:

p1 = Popen(["dmesg"], stdout=PIPE)
p2 = Popen(["grep", "hda"], stdin=p1.stdout, stdout=PIPE)
p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.
output = p2.communicate()[0]
The p1.stdout.close() call after starting the p2 is important in order for p1 to receive a SIGPIPE if p2 exits before p1.

Alternatively, for trusted input, the shell’s own pipeline support may still be used directly:

output=$(dmesg | grep hda)
becomes:

output=check_output("dmesg | grep hda", shell=True)

#######################################################################################################################

In the official python documentation we can read that subprocess should be used
for accessing system commands.

The subprocess module allows us to spawn processes, connect to their
input/output/error pipes, and obtain their return codes. 

Subprocess intends to replace several other, older modules and functions,
like: os.system, os.spawn*, os.popen*, popen2.* commands.

########################################################################################################################################

>>> p = subprocess.Popen(["echo", "hello world"], stdout=subprocess.PIPE)
>>> print p.communicate()[0]
hello world
>>>
>>> p = subprocess.Popen(["echo", "hello world"], stdout=subprocess.PIPE)
>>> print p.communicate()
('hello world\n', None)
>>>

################################################################################################################

Note, even though you could have used "shell=True", it is not the recommended
way of doing it. 
If you know that you will only work with specific subprocess functions,
such as Popen and PIPE, then it is enough to only import those.
from subprocess import Popen, PIPE

p1 = Popen(["dmesg"], stdout=PIPE)

print p1.communicate()

############################################################################################################################

The communicate() method returns a tuple (stdoutdata, stderrdata). 

Popen.communicate() interacts with process: Send data to stdin.

Read data from stdout and stderr, until end-of-file is reached.

Wait for process to terminate.

The optional input argument should be a string to be sent to the
child process, or None, if no data should be sent to the child.

Basically, when you use communicate() it means that you want to
execute the command

#################################################################################################################

# Import the module
import subprocess

# Ask the user for input
host = raw_input("Enter a host to ping: ")	

# Set up the echo command and direct the output to a pipe
p1 = subprocess.Popen(['ping', '-c 2', host], stdout=subprocess.PIPE)

# Run the command
output = p1.communicate()[0]

print output


#######################################################################################################





## title case jasons tweets
def toJadenCase(string):        
    return " ".join(w.capitalize() for w in string.split())


def friend(x):
    return [f for f in x if len(f) == 4]


def solution(number):
    return sum(x for x in range(number) if x % 3 == 0 or x % 5 == 0)

def is_isogram(string):
    return len(string) == len(set(string.lower()))

def sum_two_smallest_numbers(numbers):
    return sum(sorted(numbers)[:2])

def sum_two_smallest_numbers(numbers):
    return numbers.pop(numbers.index(min(numbers))) + numbers.pop(numbers.index(min(numbers)))

import re
def validate_pin(pin):
    return bool(re.match(r'^(\d{4}|\d{6})$',pin))

def validate_pin(pin):
    return len(pin) in (4, 6) and pin.isdigit()

def digital_root(n):
    return n if n < 10 else digital_root(sum(map(int,str(n))))

def digital_root(n):
    while n>10:
        n = sum([int(i) for i in str(n)])
    return n


def sort_array(arr):
  odds = sorted((x for x in arr if x%2 != 0), reverse=True)
  return [x if x%2==0 else odds.pop() for x in arr]


def create_phone_number(n):
  return "({}{}{}) {}{}{}-{}{}{}{}".format(*n)


def tribonacci(signature, n):
  res = signature[:n]
  for i in range(n - 3): res.append(sum(res[-3:]))
  return res




def solution(s):
    result = []
    if len(s) % 2:
        s += '_'
    for i in range(0, len(s), 2):
        result.append(s[i:i+2])
    return result





def comp(array1, array2):
    try:
        return sorted([i ** 2 for i in array1]) == sorted(array2)
    except:
        return False

def comp(a1, a2):
    return isinstance(a1, list) and isinstance(a2, list) and sorted(x*x for x in a1) == sorted(a2)

###############Mine 30 pts#####################

def sum_dig_pow(a, b): # range(a, b + 1) will be studied by the function
    ret_lst=[]
    for i in range(a,b+1):
        if digit_power(i) == i:
            ret_lst.append(i) 
    return ret_lst
            
def digit_power(n):
    length = len(str(n))
    sum = 0
    while n>0:
        sum += (n%10) ** length
        length -= 1
        n //= 10
###############################################

# processor
print("Processors: ")
with open("/proc/cpuinfo", "r")  as f:
    info = f.readlines()

cpuinfo = [x.strip().split(":")[1] for x in info if "model name"  in x]
for index, item in enumerate(cpuinfo):
    print("    " + str(index) + ": " + item)


#############################################################################################

#
# Python script to fetch system information
# Author -  ThePythonDjango.Com
# Tested with Python3 on Ubuntu 16.04
# 

import platform

# Architecture
print("Architecture: " + platform.architecture()[0])

# machine
print("Machine: " + platform.machine())

# node
print("Node: " + platform.node())

# processor
print("Processors: ")
with open("/proc/cpuinfo", "r")  as f:
    info = f.readlines()

cpuinfo = [x.strip().split(":")[1] for x in info if "model name"  in x]
for index, item in enumerate(cpuinfo):
    print("    " + str(index) + ": " + item)

# system
print("System: " + platform.system())

# distribution
dist = platform.dist()
dist = " ".join(x for x in dist)
print("Distribution: " + dist)

# Load
with open("/proc/loadavg", "r") as f:
    print("Average Load: " + f.read().strip())

# Memory
print("Memory Info: ")
with open("/proc/meminfo", "r") as f:
    lines = f.readlines()

print("     " + lines[0].strip())
print("     " + lines[1].strip())

# uptime
uptime = None
with open("/proc/uptime", "r") as f:
    uptime = f.read().split(" ")[0].strip()
uptime = int(float(uptime))
uptime_hours = uptime // 3600
uptime_minutes = (uptime % 3600) // 60
print("Uptime: " + str(uptime_hours) + ":" + str(uptime_minutes) + " hours")

#######################################################################################################################


    return sum    


def isPP(n):
    for i in range(2, n+1):
        for j in range(2, n+1):
            if i**j > n:
                break
            elif i**j == n:
                return [i, j]
    return None




def solution(string,markers):
    parts = string.split('\n')
    for s in markers:
        parts = [v.split(s)[0].rstrip() for v in parts]
    return '\n'.join(parts)




##############################################################################################################3

