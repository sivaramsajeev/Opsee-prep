#####################################marking build as failure####################################################

You should use Jenkinsfile to wrap your build script and simply mark the current build as UNSTABLE by using currentBuild.result = "UNSTABLE".

   stage {
      status = /* your build command goes here */
      if (status === "MARK-AS-UNSTABLE") {
        currentBuild.result = "UNSTABLE"
      }
   }
   
##################################################################OR 

you should also be able to use groovy and do what textfinder did

marking a build as un-stable with groovy post-build plugin

if(manager.logContains("Could not login to FTP server")) {
    manager.addWarningBadge("FTP Login Failure")
    manager.createSummary("warning.gif").appendText("<h1>Failed to login to remote FTP Server!</h1>", false, false, false, "red")
    manager.buildUnstable()
}
Also see Groovy Postbuild Plugin


####################################################or 



Use the Text-finder plugin.

Instead of exiting with status 1 (which would fail the build), do:

if ($build_error) print("TESTS FAILED!");
Than in the post-build actions enable the Text Finder, set the regular expression to match the message you printed (TESTS FAILED!)
and check the "Unstable if found" checkbox under that entry.



#######################################or


It can be done without printing magic strings and using TextFinder. Here's some info on it.

Basically you need a .jar file from http://yourserver.com/cli available in shell scripts, then you can use the following command to mark a build unstable:

java -jar jenkins-cli.jar set-build-result unstable
To mark build unstable on error, you can use:

failing_cmd cmd_args || java -jar jenkins-cli.jar set-build-result unstable
The problem is that jenkins-cli.jar has to be available from shell script. You can either put it in easy-to-access path, or download in via job's shell script:

wget ${JENKINS_URL}jnlpJars/jenkins-cli.jar

######################################################################################################################

To stop further execution when command fails:

command || exit 0

To continue execution when command fails:

command || true


74

Jenkins is executing shell build steps using /bin/sh -xe by default. -x means to print every command executed. -e means to exit with failure if any of the commands in the script failed.

So I think what happened in your case is your git command exit with 1, and because of the default -e param, the shell picks up the non-0 exit code, ignores the rest of the script and marks the step as a failure. We can confirm this if you can post your build step script here.

If that's the case, you can try to put #!/bin/sh so that the script will be executed without option; or do a set +e or anything similar on top of the build step to override this behavior.



gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()

#######################################################################################

pipeline {
	agent any	 
	
	stages {
		stage('Unit test') {
			steps {				
 			    sh 'serverless --help' // to ensure it is installed
			}
		}			
		
		stage('Integration test') {
			steps {
				sh 'serverless deploy --stage dev'
				sh 'serverless invoke --stage dev --function hello'					
			}
		}
				
		
	 	stage('Production') {
			when {
			   branch "master"
			}
			steps {	
			    parallel (
				    'us-east-1' : {
					  sh 'serverless deploy --stage production --region us-east-1'  
					  sh 'serverless invoke --stage production --region us-east-1 --function hello'
				    },
				    'ap-southeast-2' : {
					  sh 'serverless deploy --stage production --region ap-southeast-2'  
					  sh 'serverless invoke --stage production --region ap-southeast-2 --function hello'  
				    }
				    
		            )
			}	
		}
		
		stage('Teardown') {
			steps {				
				echo 'No need for DEV environment now, tear it down'
				sh 'serverless remove --stage dev'	
			}
		}
	 
	 }
	
	
	 environment {
	 		AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
			AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
	 }


######################################################################################################

pipeline {
    agent { label '' }
    stages {
        stage("test") {
            steps {
                parallel (
                    "Firefox" : {
                        sh "echo testing FFX"
                        sh "echo more steps"
                    },
                    "Chrome" : {
                        sh "echo testing Chrome"
                        sh "echo more steps"
                    }
                }
            )
        }
    }    
}


#########################################################################################################


pipeline {
    agent none
    stages {
        stage("distribute") {
            steps {
                parallel (
                    "windows" : {
                        node('windows') {
                            bat "print from windows"    
                        }
                    },
                    "mac" : {
                        node('osx') {
                            sh "echo from mac"    
                        }
                    },
                    "linux" : {
                        node('linux') {
                            sh "echo from linux"    
                        }
                    }
                }                
            )
        }
    }    
}




##############################################################################################################

You can also access credentials (ie. secrets) and set them to environment variables. For example:

	 environment {
	 		AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
			AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
                 	 }
			 
##################################################################################################################

if you use username and password style of credentials, this is slightly different:

environment {
   SAUCE_ACCESS = credentials('sauce-lab-dev')
}
This will actually set 3 variables:

SAUCE_ACCESS containing <username>:<password>
SAUCE_ACCESS_USR containing the username
SAUCE_ACCESS_PSW containing the password

############################################################################################################
post {
   success {
      archive "target/**/*"
   }
}

post {
  always {
    junit "path/to/xml"
  }
}




pipeline {
    agent { docker "java" }
    stages {
        stage("build") {
            steps {
                sh 'mvn clean install -Dmaven.test.failure.ignore=true'
            }
        }
    }
    post {
        always {
            archive "target/**/*"
            junit 'target/surefire-reports/*.xml'
        }
    }
}

#################################################################################################

 post {
        success {
            mail to:"me@example.com", subject:"SUCCESS: ${currentBuild.fullDisplayName}", body: "Yay, we passed."
        }
        failure {
            mail to:"me@example.com", subject:"FAILURE: ${currentBuild.fullDisplayName}", body: "Boo, we failed."
        }
        unstable {
            mail to:"me@example.com", subject:"UNSTABLE: ${currentBuild.fullDisplayName}", body: "Huh, we're unstable."
        }
        changed {
            mail to:"me@example.com", subject:"CHANGED: ${currentBuild.fullDisplayName}", body: "Wow, our status changed!"
        }
    }


#######################################################################################################

pipeline {
     agent { label 'master' }
     stages {
         stage('deploy') {
             steps {
                 retry(3) {
                    sh 'timeout 5s ssh -q google.com'
                 }
                 timeout(time: 3, unit: 'MINUTES') {
                    sh 'echo checking health...'
                 }            
             }
         }
     }
}

#########################################################################################

We can compose these steps together. For example, if we wanted to retry our deployment 5 times, but never want to spend more than 3 minutes before failing the pipeline stage:

   timeout(time: 3, unit: 'MINUTES') {
       retry(5) {    
           sh 'echo deploying'
           sh 'echo verifying...'
       }
   }


##################################################################################################

pipeline {
    agent { label 'master' }
    stages {
       stage('test') {
          steps {
             sh 'fail me please'
          }
       }
    }

    post {
        always {
          sh 'This will always run'
        }
        success {
          sh 'This will run only if successful'
        }
        failure {
          sh 'This will run only if failed'
        }
        unstable {
          sh 'This will run only if the run was marked as unstable'
        }
        changed {
          sh 'This will run only if the state of the Pipeline has changed')
          sh 'For example, the Pipeline was previously failing but is now successful'
        }
    }
}

#############################################################################################

pipeline {
    agent {
        docker 'node'
    }
    stages {
        stage("testing 123") {
            steps {
                sh 'node --version'
            }
        }
    }
}

## also can use Dockerfile with agent { dockerfile true },



#######################################################################################

pipeline {
  agent {
    label 'whatever'
  }
  stages {
    stage('build') {
      steps {
        sh "./build-artifact.sh"
      }
    }
    stage('test in docker') {
      agent {
        docker {
          image 'ubuntu:16.04'
          reuseNode true
        }
      }
      steps {
        sh "./run-tests-in-docker.sh"
      }
    }
  }
}




################################################################################################

pipeline {
  agent { docker 'python:3.5.1' }
  stages {
    stage('build') {
      steps {
        sh 'pip --version'
        sh 'python --version'
      }
    }
  }
}


####################################################################################################

pipeline {
    agent 'any'
     stages {
        stage ('Main Stage') {
            steps {
                script {
                    if (true) {
                        stage ('Stage 1') {
                            sh 'echo Stage 1'
                        }
                    }
                    if (false) {
                        stage ('Stage 2') {
                            sh 'echo Stage 2'
                        }
                    }
                }
            }
        }
    }
}


#################################################################################################

#########################double quote making the difference############################ 
pipeline {
    agent 'any'
    
    environment {
        docker_file = 'available'
        }
     stages {
        stage ('Addition or subtraction') {
                steps {
                    sh 'printenv'
                    }
                }
        
        stage ('Env printing') {
            steps{
                echo "$env.BUILD_ID"
                echo env.BUILD_ID
                echo docker_file
                echo JOB_NAME+':'+BUILD_ID
                echo "i am naming the container as ${JOB_NAME}:${BUILD_ID}"
                }
            }
        
        }
}


#########################################################################################


pipeline {
    agent 'any'
    
    environment {
        docker_file = 'available'
    }
     stages {
        stage ('Addition or subtraction') {
            steps {
                script {
                    sh 'printenv'
                   if ( docker_file == 'avaiable') {
                       echo "Docker file in place "
                   }
                   else {
                       echo "File Not Found"
                   }
                }
            }
        }
     }
}




###############################################################################################################


// Define variables (based on parameters set in a Jenkins job)
// and convert them to lowercase
def role = params.ROLE.toLowerCase()
def env = params.ENVIRONMENT.toLowerCase()

// Conditionally define a variable 'impact'
if (role == 'front' && env == 'prod') {
  impact = "high"
} else if (role == 'front' && env == 'dev') {
  impact = "low"
} else if (role == 'db' && env == 'stg') {
  impact = "medium"
} else {
  impact = "unknown"
}

// Print the 'impact' variable in a Jenkins declarative pipeline
pipeline {
  agent any
  stages {
    stage ("Impact") {
      steps {
        echo "The impact is ${impact}"
      }
    }
  }
}


###############################################################################################################
#below declarative vs scripted
stage ('Test 3: Master') {
    when { branch 'master' }
    steps { 
        echo 'I only execute on the master branch.' 
    }
}

stage ('Test 3: Dev') {
    when { not { branch 'master' } }
    steps {
        echo 'I execute on non-master branches.'
    }
}

########################

node {
    stage('Example') {
        if (env.BRANCH_NAME == 'master') {
            echo 'I only execute on the master branch'
        } else {
            echo 'I execute elsewhere'
        }
    }
}


#############################
pipeline {
    agent any

    stages {
        stage('test') {
            steps {
                sh 'echo hello'
            }
        }
        stage('test1') {
            steps {
                sh 'echo $TEST'
            }
        }
        stage('test3') {
            steps {
                script {
                    if (env.BRANCH_NAME == 'master') {
                        echo 'I only execute on the master branch'
                    } else {
                        echo 'I execute elsewhere'
                    }
                }
            }
        }
    }
}
###########################################################################################################
class Example {
   static void main(String[] args) {
      // Using a simple println statement to print output to the console
      println('Hello World');
   }
}


#############################################################################################################


Live Demo
class Example { 
   static void main(String[] args) { 
      def range = 5..10; 
      println(range); 
      println(range.get(2)); 
   } 
}


#########################################################################################################

class Example {
   static def DisplayName() {
      println("This is how methods work in groovy");
      println("This is an example of a simple method");
   } 
	
   static void main(String[] args) {
      DisplayName();
   } 
}

#########################################################################################

class Example { 
   static void main(String[] args) { 
      // Initializing a local variable 
      int a = 2
		
      //Check for the boolean condition 
      if (a<100) { 
         //If the condition is true print the following statement 
         println("The value is less than 100"); 
      } else { 
         //If the condition is false print the following statement 
         println("The value is greater than 100"); 
      } 
   } 
}

###############################################################################################################

class Example { 
   static void main(String[] args) { 
      // Initializing a local variable 
      int a = 12 
		
      //Check for the boolean condition 
      if (a>100) {
         //If the condition is true print the following statement 
         println("The value is less than 100"); 
      } else 
         // Check if the value of a is greater than 5 
			
      if (a>5) { 
         //If the condition is true print the following statement 
         println("The value is greater than 5 and greater than 100"); 
      } else { 
         //If the condition is false print the following statement 
         println("The value of a is less than 5"); 
      }  
   } 
}

####################################################################################################################

Live Demo
class Example { 
   static void main(String[] args) { 
      //initializing a local variable 
      int a = 2
		
      //Evaluating the expression value 
      switch(a) {            
         //There is case statement defined for 4 cases 
         // Each case statement section has a break condition to exit the loop 
			
         case 1: 
            println("The value of a is One"); 
            break; 
         case 2: 
            println("The value of a is Two"); 
            break; 
         case 3: 
            println("The value of a is Three"); 
            break; 
         case 4: 
            println("The value of a is Four"); 
            break; 
         default: 
            println("The value is unknown"); 
            break; 
      }
   }
}

#################################################################################################################

Live Demo
class Example { 
   static void main(String[] args) {
	
      for(int i = 0;i<5;i++) {
         println(i);
      }
		
   }
}



#######################################################################################################################

Live Demo
class Example {
   static void main(String[] args) {
      int count = 0;
		
      while(count<5) {
         println(count);
         count++;
      }
   }
}



###############################################################################################################
pipeline {
    agent { label 'master' }
    stages {
        stage('build') {
            steps {
                echo "Hello World!"
            }
        }
    }
}

####################################################################################################################

pipeline {
    agent { label 'master' }
    stages {
        stage('build') {
            steps {
                script {
                    def disk_size = sh(script: "df / --output=avail | tail -1", returnStdout: true).trim() as Integer
                    println("disk_size = ${disk_size}")
                }
            }
        }
    }
}

#############################################################################################################

##Get the disk size of a remote disk
script {
    def disk_size = sh(script: "ssh remote-server df / --output=avail | tail -1", returnStdout: true).trim() as Integer
    println("disk_size = ${disk_size}")
}

##############################################################################################################

def notify(status) {
   wrap([$class: 'BuildUser']) {
       emailext (
       subject: "${status}: Job ${env.JOB_NAME} ([${env.BUILD_NUMBER})",
       body: """
       Check console output at <a href="${env.BUILD_URL}">${env.JOB_NAME} (${env.BUILD_NUMBER})</a>""",
       to: "${BUILD_USER_EMAIL}",
       from: 'jenkins@company.com')
   }
}

###################################################################################################################

## This will add text to the specific job on the summary page of the classic UI. The text does not show up on the BlueOcean UI.

script {
   manager.addShortText("Some text")
   manager.addShortText("\ntext")
   manager.addShortText("same line", "black", "lightgreen", "0px", "white")
}

##########################################################################################################################

pipeline {
   agent none
   stages {
       stage('example') {
           agent { label 'master' }
           steps {
               script {
                   wrap([$class: 'BuildUser']) {
                       echo "BUILD_USER=${BUILD_USER}"
                       echo "BUILD_USER_FIRST_NAME=${BUILD_USER_FIRST_NAME}"
                       echo "BUILD_USER_LAST_NAME=${BUILD_USER_LAST_NAME}"
                       echo "BUILD_USER_ID=${BUILD_USER_ID}"
                       echo "BUILD_USER_EMAIL=${BUILD_USER_EMAIL}"
                       echo "---"
                       echo "env.BUILD_USER=${env.BUILD_USER}"
                       echo "env.BUILD_USER_FIRST_NAME=${env.BUILD_USER_FIRST_NAME}"
                       echo "env.BUILD_USER_LAST_NAME=${env.BUILD_USER_LAST_NAME}"
                       echo "env.BUILD_USER_ID=${env.BUILD_USER_ID}"
                       echo "env.BUILD_USER_EMAIL=${env.BUILD_USER_EMAIL}"
                   }
               }
           }
       }
   }
}



#################################################################################################################################

pipeline {
   agent none
   environment {
       color = "blue"
   }
   stages {
       stage('first') {
            agent { label 'master' }
            steps {
               sh "printenv | sort"
            }
        }
    }
}



#########################################################################################################################################

pipeline {
   agent none
   environment {
       color = 'blue'
   }
   stages {
       stage('example') {
            agent { label 'master' }
            steps {
               script {
                   def fields = env.getEnvironment()
                   fields.each {
                        key, value -> println("${key} = ${value}");
                    }
 
                    println(env.PATH)
               }
            }
        }
    }
}

#########################################################################################################################################

pipeline {
   agent none
   environment {
       field = 'some'
   }
   stages {
       stage ('Preparation') {
           agent { label 'master'}
           environment {
               JENKINS_PATH = sh(script: 'pwd', , returnStdout: true).trim()
           }
           steps {
               echo "Hello world"
               echo "PATH=${JENKINS_PATH}"
               sh 'echo "JP=$JENKINS_PATH"'
          }
      }
   }
}

############################################################################################################################################

pipeline {
   agent none
   environment {
       first_path = get_first()
   }
   stages {
       stage('example') {
            agent { label 'master' }
            steps {
                print(env.first_path)
            }
        }
    }
}
 
def get_first() {
    node('master') {
        return env.PATH.split(':')[0]
    }
}


#########################################################################################################################################################

triggers {
    pollSCM '* * * * *'
}

####################################################################################################################################################
script{
	currentBuild.displayName = "hello"  // replaces the job number
	currentBuild.description = "world"  // Writes text under the job number
}

################################################################################################################################

curl -I -u auto:<userpasswd> http://<jenkins_server>/job/test/build?token=wefiytgwiefiweihfqweiodf

curl -I -u auto:<user_api_token> http://<jenkins_Server>/job/test/build?token=wefiytgwiefiweihfqweiodf

## proxy causing Jenkins loading to wait  tcpdump saved 
/usr/bin/java -Djava.net.preferIPv4Stack=true -Dhttp.proxyHost=10.21.92.40 -Dhttp.proxyPort=3128 -Dhttps.proxyHost=10.21.92.40 -Dhttps.proxyPort=3128 -jar /usr/share/jenkins/jenkins.war --webroot=/var/cache/jenkins/war --httpPort=8080


stage('Approval') {
    when { 
        branch "qa"
    }
    input {
        message "Approve release?"
        ok "Yes"
        parameters {
            string(name: 'IS_APPROVED', defaultValue: 'Yes', description: 'Approve?')
        }
    }
    steps {
        echo "Commit to master"
    }
}


First, I think you need to add an id attribute to your input.

Then, you can send a POST request to one of these:

http://yourjenkins/job/${YOUR_PROJECT}/${BUILD_NUMBER}/input/${INPUT_ID}/abort

This will cancel your job and ignore any parameter.

http://yourjenkins/job/${YOUR_PROJECT}/${BUILD_NUMBER}/input/${INPUT_ID}/proceedEmpty

This will resume your job and ignore any parameter.

http://yourjenkins/job/${YOUR_PROJECT}/${BUILD_NUMBER}/input/${INPUT_ID}/submit


You could use the Groovy flow control to break the build - you just need a step to execute the test:

Following the example on the link :

node {
    stage('CheckLog') {
      steps {
        if (manager.logContains('.*myTestString.*')) {
          error("Build failed because of this and that..")    
        }
      }
    }
    
    
##################################################################################################

pipeline {
    agent any

    stages {
        stage('Input') {
            steps {
                input('Do you want to proceed?')
            }
        }

        stage('If Proceed is clicked') {
            steps {
                print('hello')
            }
        }
    }
}


####################################################################################################


pipeline {
    agent any

    stages {
        
        stage('Wait for user to input text?') {
             steps {
                script {
                    def userInput = input(id: 'userInput', message: 'Merge to?',
                    parameters: [[$class: 'ChoiceParameterDefinition', defaultValue: 'strDef', 
                    description:'describing choices', name:'nameChoice', choices: "QA\nUAT\nProduction\nDevelop\nMaster"]
                        ])

            println(userInput); //Use this value to branch to different logic if needed
        }
    }

}
        
        
        
    }
}

##################################################################################################

script {
            // Define Variable
             def USER_INPUT = input(
                    message: 'User input required - Some Yes or No question?',
                    parameters: [
                            [$class: 'ChoiceParameterDefinition',
                             choices: ['no','yes'].join('\n'),
                             name: 'input',
                             description: 'Menu - select box option']
                    ])

            echo "The answer is: ${USER_INPUT}"

            if( "${USER_INPUT}" == "yes"){
                //do something
            } else {
                //do something else
            }
        }
	
	
	
################################################################################################

pipeline {
    agent any

    parameters {
        booleanParam(defaultValue: true, description: '', name: 'userFlag')
    }

    stages {
        stage("foo") {
            steps {
                echo "flag: ${params.userFlag}"
            }
        }
    }
}

You can ask for string input:

string(defaultValue: true, description: '', name: 'userFlag')
You can also ask for multiple choice items, and stack up the input required:

    parameters {
        string(defaultValue: "TEST", description: 'What environment?', name: 'userFlag')
        choice(choices: ['US-EAST-1', 'US-WEST-2'], description: 'What AWS region?', name: 'region')
    }
    
    

##############################################################################################


pipeline {
    agent any

    parameters {
        string(defaultValue: "TEST", description: 'What environment?', name: 'userFlag')
        choice(choices: ['US-EAST-1', 'US-WEST-2'], description: 'What AWS region?', name: 'region')
        }

    stages {
        stage("foo") {
            steps {
                echo "Environment value : ${params.userFlag}"
                echo "AWS region: ${params.region}"
                
            }
        }
    }
}



########################################################################################


The simplest solution is to completely disable security - change true to false in /var/lib/jenkins/config.xml file.

<useSecurity>true</useSecurity>
Then just restart Jenkins, by

sudo service jenkins restart
And then go to admin panel and set everything once again

sed -i 's/<useSecurity>true/<useSecurity>false/' ~/config.xml

##############################################################################################



pipeline {

  agent { label 'docker-build-slave' }

  environment {
    IMAGE = 'registry.gitlab.com/XXXXX/bible-server'
    DOCKER_REGISTRY_CREDENTIALS = credentials('DOCKER_REGISTRY_CREDENTIALS')
  }

  options {
    timeout(10)
  }

  stages {

    stage('Test') {
      steps {
        sh 'yarn'
        sh 'npm test'
      }
    }

    stage('Build') {
      when {
        branch '*/master'
      }
      steps {
        sh 'docker login -u ${DOCKER_REGISTRY_CREDENTIALS_USR} -p ${DOCKER_REGISTRY_CREDENTIALS_PSW} registry.gitlab.com'
        sh 'docker build -t ${IMAGE}:${BRANCH_NAME} .'
        sh 'docker push ${IMAGE}:${BRANCH_NAME}'
      }
    }

    stage('Deploy') {
      when {
        branch '*/master'
      }
      steps {
        echo 'Deploying ..'
      }
    }
  }

  post {
    success {
      mail to: "XXXXX@gmail.com", subject:"SUCCESS: ${currentBuild.fullDisplayName}", body: "Yay, we passed."
    }
    failure {
      mail to: "XXXXX@gmail.com", subject:"FAILURE: ${currentBuild.fullDisplayName}", body: "Boo, we failed."
    }
  }
}


##########################################################################################################################


