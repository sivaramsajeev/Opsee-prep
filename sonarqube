In one sentence Sonar is an open source platform that allows you to track and improve the quality of your source code. One of the key 
aspects when talking about software quality is the test coverage or code coverage which is how much of your source code is tested by
Unit tests. Sonar integrates with the most popular open source code coverage tools ( JaCoCo, Cobetura, Emma ) and the well-known 
commercial Clover by Attlassian. By default it uses the JaCoCo (Java Code Coverage) engine


Difference between dynamic code analysis and static code analysis

Static analysis is the testing and evaluation of an application by examining the code without executing the application whereas Dynamic analysis is the testing and evaluation of an application during runtime.

Many software defects that cause memory and threading errors can be detected both dynamically and statically. The two approaches are complementary because no single approach can find every error.

The primary advantage of dynamic analysis: It reveals subtle defects or vulnerabilities whose cause is too complex to be discovered by static analysis. Dynamic analysis can play a role in security assurance, but its primary goal is finding and debugging errors.


#############################################################################################################################################################################
Code coverage is a measure of how much code is executed during testing &
Test coverage is a measure of how many test cases have been executed during testing.


recommend you try to suppress specific warnings by using @SuppressWarnings("squid:S2078").

For suppressing multiple warnings you can do it like this @SuppressWarnings({"squid:S2078", "squid:S2076"})

There is also the //NOSONAR comment that tells SonarQube to ignore all errors for a specific line.

Finally if you have the proper rights for the user interface you can issue a flag as a false positive directly from the interface.

The reason why I recommend suppression of specific warnings is that it's a better practice to block a specific issue instead of using 
//NOSONAR and risk a Sonar issue creeping in your code by accident.

#############################################################################################################################################################

sonar.exclusions=src/java/test/**

SonarLint lives only in the IDE (IntelliJ, Eclipse and Visual Studio). Its purpose is to give instantaneous feedback as you type your code. For this, it concentrates on what code you are adding or updating.

SonarQube is a central server that processes full analyses (triggered by the various SonarQube Scanners). Its purpose is to give a 360° 
vision of the quality of your code base. For this, it analyzes all the source lines of your project on a regular basis.

Both SonarLint and SonarQube rely on the same static source code analyzers - most of them being written using SonarSource technology.

Sonar will run CheckStyle, FindBugs and PMD, as well as a few other "plugins" such as Cobertura (code coverage) by default for Java 
projects. The main added value, however, is that it stores the history in a database. You can then see the trend. Are you improving 
the code base or are you doing the opposite? Only a tool with memory can tell you that.

You should run Sonar in your CI system so that even things that take some time to execute (such as CPD – copy paste detector) can run. 
And you'll have your history. Whereas with an Eclipse plugin, for example, you'll detect violations sooner – which is great – but you 
will be tempted to run it less often if it starts taking too long, or run less "quality plugins" (such as skipping CPD or skipping 
code coverage analysis). And you won't have history.

Also, Sonar generates visual reports, "Dashboard" style. Which makes it very easy to grasp. With Sonar in Jenkins, you'll be able to 
show developers and your management the effects of the work that was performed on the quality of the code base over the last few weeks 
and months.

<repositories>
    <repository>
        <id>myco-sonatype-nexus-snapshots</id>
        <name>MyCo Sonatype-Nexus Snapshots</name>
        <url>http://sonatype.myco.com/nexus/content/repositories/snapshots/</url>
    </repository>
</repositories>


To disalow dashboard without login -> You can set the "sonar.forceAuthentication" to "true" in the web admin interface:

########################################################################################################################

task to examine how to make our internal Nexus installation (installed on CentOs/RHEL) to store artifacts in Amazon S3 cloud storage
(or any other cheap cloud storage).

So far, I had found only one solution - mount s3 as a file system, f.e. using s3fs. But I've met few problems using s3fs 
(beyond the scope of this topic).

Edit: Since version 3.12, S3 blobstore is included in nexus.

Sonatype has an open source plugin that does that:

https://github.com/sonatype/nexus-blobstore-s3

you compile it, put it on the nexus deploy directory, setup your S3 account and you're good to test it.

Since version 3.12, Nexus natively supports S3 blob store: https://blog.sonatype.com/nexus-repository-3.12-support-for-s3-blob-stores

##################################################################################################################################

11
I have a Maven web project in my repo.

I am a Maven noob but still I understand the fact that there are plugins which we need to configure only then we could run plugin specific commands.

Facts:

I have a sonar server running on my local machine at port 9000.

I have not added any sonar specific plugin in my POM.xml

Reference:

http://www.sonarsource.org/we-had-a-dream-mvn-sonarsonar/

Observation:

But still when I run mvn sonar:sonar in my project from command line it works fine.

Matter of the fact is I have NOT configured sonar plugin in my POM.xml Even then from where the hell Maven is picking up and understanding "sonar:sonar" goal/command?

The reason is that the Sonar Maven Plugin is hosted at the Codehaus Mojo project and benefits from the groupId "org.codehaus.mojo". 
This allows to use the shortcut "sonar:sonar" instead of "org.codehaus.mojo:sonar-maven-plugin::sonar" (see the section "Configuring 
Maven to Search for Plugins" of the Maven documentation)

#######################################################################################################################################################

want to analyse a project with SonarQube and Jenkins, here's what you need:

A SonarQube server up and running

A Jenkins server up and running with the SonarQube Scanner for Jenkins installed and configure to point to your SonarQube server

A job configured to run a SonarQube analysis on your project:

Using the default and standard SonarQube Scanner (suitable for most projects)

Using the SonarQube Scanner for MSBuild (for .NET solutions)

Using a post build action for Maven-based projects

Everything is described more in details on the SonarQube Scanner for Jenkins documentation page.

######################################################################################################################################################################################################################################


Answer is very simple: "Runner" is the old name for "Scanner".

Everything you need to know about the different SonarQube Scanners is available on the Scanners part of the official documentation.

If you're stuck to Java 7, then you can use:

SonarQube Runner (sonar-runner) up to version 5.5 of SonarQube
SonarQube Scanner (sonar-scanner) 2.6.1

####################################################################


command line alternative : mvn sonar:sonar -Dsonar.host.url=http://<sonarqubeserver>:<port>


