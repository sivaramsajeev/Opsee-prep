Test driven methodology ==> test cases are written before the code

static methods dont need class to initialize

In A CICD pipeline U dont have eclipse installed to right click and run as junit test case instead need to integrate with maven
to take care --> maven surefire plugin 

<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin -->
<dependency>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <version>3.0.0-M4</version>
</dependency>

maven goals : test
###from https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin/3.0.0-M4


No news is good news --> default is True

Junit5 != junit4 + 1

Jupiter --> Api of Junit (5th Planet) { Interacts with underlying platfrom of junit}

System.out.println is not the way but junit way of assertion to inform results   
	-->  assertEquals(2, mathUtils.add(1, 1),"Give the description of the test handy for huge code base")

llly assertArrayEquals(arr1,arr2), assertIterableEquals(iter1,iter2),assertThrows(ArithmeticException.class, () -> mathUtils.divide(1, 0), 
				"Divide should throw ArithmeticException when denominator is zero");{for exceptions}


An aniti-pattern is declaring variables and using them inside test cases and modifying them creating a dependency between test cases
but Junit5 doesnt allow it since it creates a new instance for every test 

#########################################################################
package io.javabrains.utils;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

class MathUtilsTest {
	
	private MathUtils mathUtils;
	
	
	@BeforeEach               #################avoids initializing it before each test cases
	void initEach() {
		mathUtils = new MathUtils();
	}

	@Nested
	class AddTest {
		@Test
		void testAddingTwoPositives() {
			assertEquals(2, mathUtils.add(1, 1), 
					"Add method should return the sum of two numbers");
		}
		
		@Test
		void testAddingTwoNegatives() {
			assertEquals(-2, mathUtils.add(-1, -1), 
					"Add method should return the sum of two numbers");
		}
		
		@Test
		void testAddingAPositiveAndANegative() {
			assertEquals(0, mathUtils.add(-1, 1), 
					"Add method should return the sum of two numbers");
		}
	}
	
	@Test 
	void testMultiply() {
		assertAll(
				() -> assertEquals(0, mathUtils.multiply(1, 0)),
				() -> assertEquals(1, mathUtils.multiply(1, 1)),
				() -> assertEquals(6, mathUtils.multiply(2, 3))
				);
	}
	
	@Test 
	void computeCircleArea() {
		assertEquals(314.1592653589793, mathUtils.computeCircleArea(10), 
				"Should return right circle area");
	}
	
	@Test
	void testDivide() {
		assertThrows(ArithmeticException.class, () -> mathUtils.divide(1, 0), 
				"Divide should throw ArithmeticException when denominator is zero");
	}
	
	
}



##########################################################################################################



